* java maven 项目编译技术总结
** java 环境变量

   .bashrc文件中

export JAVA_HOME=/home/ym/jdk1.8.0_65
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar  
export PATH=$PATH:$JAVA_HOME/bin 
   
** java ant环境
保持和java环境变量一致 
    #set Ant enviroment
    export ANT_HOME=/home/ym/apache-ant-1.9.6
    export PATH=$PATH:$ANT_HOME/

    source /etc/proifle   立刻将配置生效
    ant -version   测试ant是否生效


** java maven环境
   配置maven安装目录：                                                                                                                                             
export MAVEN_HOME=/home/ym/apache-maven-3.3.3
export PATH=${MAVEN_HOME}/bin:${PATH}                                                                                                                           

http://www.linuxidc.com/Linux/2013-05/84489.htm

测试方法
mvn -v

** maven pom.xml 文件
   source /etc/profile // 使上面配置生效


<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"; xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance";
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>org.springframework</groupId>
        <artifactId>gs-maven</artifactId>
        <packaging>jar</packaging>
        <version>0.1.0</version>

        <build>
                <plugins>
                        <plugin>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-shade-plugin</artifactId>
                                <version>2.1</version>
                                <executions>
                                        <execution>
                                                <phase>package</phase>
                                                <goals>
                                                        <goal>shade</goal>
                                                </goals>
                                                <configuration>
                                                        <transformers>
                                                                <transformer
                                                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                                                        <mainClass>hello.HelloWorld</mainClass>
                                                                </transformer>
                                                        </transformers>
                                                </configuration>
                                        </execution>
                                </executions>
                        </plugin>
                </plugins>
        </build>
</project>



** git 更新代码的命令
别人使用git提交代码。我怎么更新代码啊？
直接pull不行。因为我本地也添加代码了。。直接pull会导致代码覆盖

可以用git stash 放到栈中去，然后git pull下来，然后有需要在git stash pop (从栈中提取代码出来)，但是这一步要仔细，可能代码会和你pull下来的东西有冲突
．还有一种方法是先建立一个新的分支，然后pull那里的代码下来看一下.
可以用git stash 放到栈中去，然后git pull下来，然后有需要在git stash pop (从栈中提取代码出来)，但是这一步要仔细，可能代码会和你pull下来的东西有冲突
．还有一种方法是先建立一个新的分支，然后pull那里的代码下来看一下.



** java snippet java编写代码
** java 增加依赖的包  cmake使用

** cmake 编译入门
http://blog.csdn.net/typename/article/details/6306842


** mvn 构建java项目 插件quickstart

   Maven使用原型插件来创建项目。要创建一个简单的Java应用程序，我们使用
maven-archetype-quickstart插件。在下面的例子中，我们将创建一个基于Maven
的Java应用程序项目在C:MVN文件夹。

让我们打开命令控制台，进入到C:MVN目录并执行以下命令mvn命令。

mvn archetype:generate -DgroupId=com.companyname.bank
-DartifactId=consumerBanking
-DarchetypeArtifactId=maven-archetype-quickstart
-DinteractiveMode=false
Maven会开始处理，并建立完整的Java应用程序项目结构。

** mvn 构建java和jetty web项目示例
http://blog.csdn.net/edward0830ly/article/details/8748986

** mvn 命令使用
编译Java代码

运行下面语句编译

mvn compile
编译完成的 .class 文件将会出现在 target/classes 目录下.如下图

运行项目：
mvn exec:java -Dexec.mainClass="hello.HelloWorld"

mv test 运行测试工程

输出如下：
如果不想直接运行 .class 文件，可以将其打包：

*** mvn package
打包完成后，会在 target 目录下生成一个JAR文件，文件名由<artifactId> 和
<version>组成。比如本例，将会根据 pom.xml 生成 gs-maven-0.1.0.jar.
如果你想安装您的项目的JAR文件到本地Maven仓库，那么你应该调用下面语句：

mvn install
此时，你的项目代码将会经过编译、测试、打包并拷贝到本地依赖库，提供给其
他项目引用。

** 给pom.xml增加本地包 :TODO:
点击pom.xml文件.我们可以看到下面有7个标签.

[9e90a6]

分别是
Overview:显示maven项目的一些基本信息.
Dependencies:添加jar包的页面,很重要!
Plugins:添加maven插件的页面.比如tomcat-maven-plugin等.
Reporting:从没用过,无视~
Dependency Hierarchy:用于显示jar包的依赖关系.没事的时候可以看看jar包的依
赖关系.
Effective POM:显示maven的编译路径,plugin之类的.也可以无视.
pom.xml:导入jar包的信息,可以在其中进行修改.重要

** java ant 工程编译 
http://www.cnblogs.com/xiaona/archive/2013/09/05/a03c0f8371a43c13a32ae7536785eb17.html
http://www.blogjava.net/shenh062326/archive/2011/08/07/355937.html


http://www.thinksaas.cn/group/topic/166099/
ant 实现 java自动构建

ant 打包java工程
http://blog.csdn.net/erli11/article/details/30491719
