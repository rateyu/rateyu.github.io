* 安装ubuntu系统 && git 环境安装

** 无线驱动无法使用 安装的两种方法：
1. 连接网络 直到重启安装无线驱动结束
2. 安装mint驱动程序
Mint Driver Manager 
http://www.linuxidc.com/Linux/2014-05/102128.htm

注意：搜索中文名，驱动管理才能找到！

** 必装软件
emacs 强大的不用我讲了
chromium 浏览器非常好用

emacs 插件

yasnippets：  snippets c++ java
jdee：       自动导入jar包  集成编译和运行 调试
emacs 字体： 家里的输入法字体换爽 公司的字体很差，可以考虑下如何修改

** git环境安装

*** github 集成
*** github 提交 rateyu@gmail.com


github

1. 在本地建立一个文件夹，然后做一些全局变量的初始化
git config --global user.name = "用户名或者用户ID"
git config --global user.email = "邮箱"
这两个选项会在以后的使用过程中自动添加到代码中。

2. 创建验证用的公钥
这个是比较复杂和困扰大多数人的地方，因为 git 是通过 ssh 的方式访问资源库的，所以需要在本地创建验证用的文件。
使用命令：ssh-keygen -C 'you email address@gmail.com' -t rsa
会在用户目录 ~/.ssh/ 下建立相应的密钥文件
可以使用 ssh -v git@github.com 命令来测试链接是否畅通
3. 上传公钥
在 github.com 的界面中 选择右上角的 Account Settings，然后选择 SSH Public Keys ，选择新加。
Title 可以随便命名，Key 的内容拷贝自 ~/.ssh/id_rsa.pub 中的内容，完成后，可以再使用 ssh -v git@github.com 进行测试。看到下面的信息表示验证成功。

- 注意：此处要重启os，比较奇怪
- emacs -nw  不使用x11界面

4. 复制代码

使用 git clone git@github.com:cocowool/userguide.git userguide 可以将代码复制到本地的 userguide 文件夹中

git clone git@github.com:rateyu/rateyu.github.io.git ./blog2015
此种方式有读写权限

> 运行命令$git clone https://github.com/jenkinsci/gerrit-trigger-plugin.git
> 此种方式只有读的权限

sublime txt 3 github使用说明
安装 包管理器
git quick commit
git push current branch


5. 提交流程
1) git add .
2) git commit -m "ubuntu 14 环境安装"

*** Please tell me who you are.
Run
  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

3) 提交远程代码
git push -u origin master

其他相关命令参考：

进行自己的修改，完成后请求原作者合并
git pull person master 

# 创建一个版本库
git init
# 每次修改好了后，可以先将修改存入stage(快照/索引)中
git add <modified files>
# 修改了大量文件则使用下面这个命令批量存入
git add .
# 使用commit将快照/索引中的内容提交到版本库中
git commit -m "msg"
# 也可以将git add与git commit用一个指令完成
git commit -a -m "msg"
# 将本地的git档案与github(远程)上的同步
git push
# 将github(远程)的git档案与本地的同步(即更新本地端的repo)
git pull
# 例如,pull指令其实包含了fetch(將变更复制回來)以及merge(合并)操作
git pull git://github.com/tom/test.git
 
# 另外版本控制系統的branch功能也很有意思，若同时修改bug，又要加入新功能，可以fork出一个branch：一个专门修bug，一个专门加入新功能，等到稳定后再merge合并
git branch bug_fix # 建立branch，名为bug_fix
git checkout bug_fix # 切换到bug_fix
git checkout master #切换到主要的repo
git merge bug_fix #把bug_fix这个branch和现在的branch合并
 
# 若有remote的branch，想要查看并checkout
git branch -r # 查看远程branch
git checkout -b bug_fix_local bug_fix_remote #把本地端切换为远程的bug_fix_remote branch并命名为bug_fix_local
 
# 还有其它可以查看repo状态的工具
git log #可以查看每次commit的改变
git diff #可以查看最近一次改变的內容，加上参数可以看其它的改变并互相比较
git show #可以看某次的变更
 
# 若想知道目前工作树的状态，可以輸入
git status



参考url地址：
http://www.cnblogs.com/cocowool/archive/2010/10/19/1855616.html
